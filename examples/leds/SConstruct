# ----------------------------------------------------------------------
# -- Scons script for Sintesizing the hello world verilog hardware
# -- on an icestick board
# ----------------------------------------------------------------------
import os
import platform
from SCons.Script import (Builder, DefaultEnvironment, Default, AlwaysBuild,
                          GetOption)

# -- Executables extension
EXT = ''
if 'Windows' == platform.system():
    EXT = '.exe'

# -- Source filename
NAME = 'leds'

# -- pcf file
PCF = NAME + '.pcf'

# -- Target name
TARGET = 'hardware'


# -- Define the Sintesizing Builder
synth = Builder(action='yosys{0} -p \"synth_ice40 -blif $TARGET\" $SOURCE'.format(EXT),
                suffix='.blif',
                src_suffix='.v')

pnr = Builder(action='arachne-pnr{0} -d 1k -o $TARGET -p {1} $SOURCE'.format(EXT, PCF),
              suffix='.asc',
              src_suffix='.blif')

bitstream = Builder(action='icepack{0} $SOURCE $TARGET'.format(EXT),
                    suffix='.bin',
                    src_suffix='.asc')

# -- Icetime builder
time_rpt = Builder(action='icetime{0} -d hx1k -mtr $TARGET $SOURCE'.format(EXT),
                   suffix='.rpt',
                   src_suffix='.asc')

# -- Build the environment
env = DefaultEnvironment(BUILDERS={'Synth': synth, 'PnR': pnr,
                                   'Bin': bitstream, 'Time': time_rpt},
                         ENV=os.environ, tools=[])

# -- Generate the bitstream
blif = env.Synth(TARGET, NAME)
asc = env.PnR(TARGET, [blif, PCF])
bitstream = env.Bin(TARGET, asc)

# -- Upload the bitstream into FPGA
upload = env.Alias('upload', bitstream, 'iceprog{0} $SOURCE'.format(EXT))
AlwaysBuild(upload)

# -- Target time: calculate the time
rpt = env.Time(asc)
t = env.Alias('time', rpt)
AlwaysBuild(t)


Default(bitstream)

# -- These is for cleaning the files generated using the alias targets
if GetOption('clean'):
    env.Default(t)
